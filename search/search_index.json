{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"py-ballisticcalc","text":""},{"location":"about/","title":"About project","text":"<p>The library provides trajectory calculation for ballistic projectiles including air rifles, bows, firearms, artillery, and so on.</p> <p>The 3DoF model that is used in this calculator is rooted in public C code of JBM's calculator, ported to C#, optimized, fixed and extended with elements described in Litz's Applied Ballistics book and from the friendly project of Alexandre Trofimov and then ported to Go.</p> <p>This Python3 implementation has been expanded to support multiple ballistic coefficients and custom drag functions, such as those derived from Doppler radar data.</p> <p>The online version of Go documentation is located here.</p> <p>C# version of the package is located here, and the online version of C# API documentation is located here.</p> <p>RISK NOTICE</p> <p>The library performs very limited simulation of a complex physical process and so it performs a lot of approximations. Therefore, the calculation results MUST NOT be considered as completely and reliably reflecting actual behavior or characteristics of projectiles. While these results may be used for educational purpose, they must NOT be considered as reliable for the areas where incorrect calculation may cause making a wrong decision, financial harm, or can put a human life at risk.</p> <p>THE CODE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"contributing/","title":"Contrubuting","text":""},{"location":"contributors/","title":"Our People","text":"<p>py-ballisticcalc has an amazing community of contributors, reviewers, and experts that help propel the project forward. Here, we celebrate those people and their contributions.</p>"},{"location":"contributors/#contributors","title":"Contributors","text":"<p>This project exists thanks to all the people who contribute.</p> <p></p> <p>Special thanks to:</p> <ul> <li>David Bookstaber - Ballistics Expert  For help understanding and improving the functionality</li> <li>Nikolay Gekht For the sources code on C# and GO-lang from which this project firstly was forked</li> </ul>"},{"location":"help/","title":"Getting help with py-ballisticcalc","text":"<p>If you need help getting started with py-ballisticcalc or with advanced usage, the following sources may be useful.</p>"},{"location":"help/#usage-documentation","title":"Usage Documentation","text":"<p>The usage documentation is the most complete guide on how to use py-ballisticcalc.</p>"},{"location":"help/#github-discussions","title":"GitHub Discussions","text":"<p>GitHub discussions are useful for asking questions, your question and the answer will help everyone.</p>"},{"location":"install/","title":"Installation","text":"<p>Installation is as simple as:</p> pipuv <pre><code>pip install py-ballisticcalc\n</code></pre> <pre><code>uv add py-ballisticcalc \n</code></pre> <p>py-ballisticcalc has a few dependencies:</p> <ul> <li><code>typing-extensions</code>: Backport of the standard library typing module.</li> </ul> <p>If you've got Python 3.9+ and <code>pip</code> installed, you're good to go.</p>"},{"location":"install/#optional-dependencies","title":"Optional dependencies","text":"<p>py-ballisticcalc has the following optional dependencies:</p> <ul> <li><code>py_ballisticcalc.exts</code>: Cython based implementation of some classes to increase performance. py_ballisticcalc.exts package.</li> </ul> <p>To install optional dependencies along with py-ballisticcalc:</p> pipuv <pre><code># with the `py_ballisticcalc.exts` extra:\npip install 'py-ballisticcalc[exts]'\n</code></pre> <pre><code># with dependencies for data visualisation    \npip install py-ballisticcalc[visualize]\n</code></pre> <pre><code># with the `py_ballisticcalc.exts` extra:\nuv add 'py-ballisticcalc[exts]'\n</code></pre> <pre><code># with dependencies for data visualisation    \nuv add  'py-ballisticcalc[visualize]'\n</code></pre> <p>Of course, you can also install requirements manually with <code>pip install py-ballisticcalc.exts pandas matplotlib</code>.</p> <p>To install latest version from sources in editable mode</p> <pre><code>git clone github.com/o-murphy/py-ballisticcalc\ncd py-ballisticcalc\npip install -e .[dev]\n# optionally install binary extensions\npip install -e ./py_ballisticcalc.exts[dev]\n</code></pre>"},{"location":"why/","title":"Why use Pydantic py-ballisticcalc?","text":""},{"location":"api/conditions/atmo/","title":"Atmo","text":"<p>Atmo </p> <p>Atmospheric conditions and density calculations</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>def __init__(self,\n             altitude: Optional[Union[float, Distance]] = None,\n             pressure: Optional[Union[float, Pressure]] = None,\n             temperature: Optional[Union[float, Temperature]] = None,\n             humidity: float = 0.0,\n             powder_t: Optional[Union[float, Temperature]] = None):\n\n    self.humidity = humidity or 0.0\n    if self.humidity &gt; 1:\n        self.humidity = humidity / 100.0\n    if not 0 &lt;= self.humidity &lt;= 1:\n        self.humidity = 0.0\n\n    self.altitude = PreferredUnits.distance(altitude or 0)\n    self.pressure = PreferredUnits.pressure(pressure or Atmo.standard_pressure(self.altitude))\n    self.temperature = PreferredUnits.temperature(temperature or Atmo.standard_temperature(self.altitude))\n    # ensure that if powder_temperature are not provided we use atmospheric temperature\n    self.powder_temp = PreferredUnits.temperature(powder_t or self.temperature)\n\n    self._t0 = self.temperature &gt;&gt; Temperature.Fahrenheit\n    self._p0 = self.pressure &gt;&gt; Pressure.InHg\n    self._a0 = self.altitude &gt;&gt; Distance.Foot\n    self._ta = self._a0 * cLapseRateImperial + cStandardTemperatureF\n    self.density_ratio = self.calculate_density(self._t0, self._p0) / cStandardDensity\n    self._mach1 = Atmo.machF(self._t0)\n    self.mach = Velocity.FPS(self._mach1)\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.altitude","title":"altitude  <code>instance-attribute</code>","text":"<pre><code>altitude: Distance = distance(altitude or 0)\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.pressure","title":"pressure  <code>instance-attribute</code>","text":"<pre><code>pressure: Pressure = pressure(pressure or standard_pressure(altitude))\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.temperature","title":"temperature  <code>instance-attribute</code>","text":"<pre><code>temperature: Temperature = temperature(temperature or standard_temperature(altitude))\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.humidity","title":"humidity  <code>instance-attribute</code>","text":"<pre><code>humidity: float = humidity or 0.0\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.powder_temp","title":"powder_temp  <code>instance-attribute</code>","text":"<pre><code>powder_temp: Temperature = temperature(powder_t or temperature)\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.density_ratio","title":"density_ratio  <code>instance-attribute</code>","text":"<pre><code>density_ratio: float = calculate_density(_t0, _p0) / cStandardDensity\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.mach","title":"mach  <code>instance-attribute</code>","text":"<pre><code>mach: Velocity = FPS(_mach1)\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.standard_temperature","title":"standard_temperature  <code>staticmethod</code>","text":"<pre><code>standard_temperature(altitude: Distance) -&gt; Temperature\n</code></pre> <p>ICAO standard temperature for altitude</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>@staticmethod\ndef standard_temperature(altitude: Distance) -&gt; Temperature:\n    \"\"\"ICAO standard temperature for altitude\"\"\"\n    return Temperature.Fahrenheit(cStandardTemperatureF\n                                  + (altitude &gt;&gt; Distance.Foot) * cLapseRateImperial)\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.standard_pressure","title":"standard_pressure  <code>staticmethod</code>","text":"<pre><code>standard_pressure(altitude: Distance) -&gt; Pressure\n</code></pre> <p>ICAO standard pressure for altitude</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>@staticmethod\ndef standard_pressure(altitude: Distance) -&gt; Pressure:\n    \"\"\"ICAO standard pressure for altitude\"\"\"\n    return Pressure.InHg(0.02953\n                         * math.pow(3.73145 - 2.56555e-05 * (altitude &gt;&gt; Distance.Foot),\n                                    cPressureExponent)\n                         )\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.standard","title":"standard  <code>staticmethod</code>","text":"<pre><code>standard(altitude: Union[float, Distance] = 0, temperature: Optional[Temperature] = None) -&gt; Atmo\n</code></pre> <p>Creates standard ICAO atmosphere at given altitude. If temperature not specified uses standard temperature.</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>@staticmethod\ndef standard(altitude: Union[float, Distance] = 0, temperature: Optional[Temperature] = None) -&gt; 'Atmo':\n    \"\"\"Creates standard ICAO atmosphere at given altitude.\n        If temperature not specified uses standard temperature.\n    \"\"\"\n    return Atmo.icao(altitude, temperature)\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.icao","title":"icao  <code>staticmethod</code>","text":"<pre><code>icao(altitude: Union[float, Distance] = 0, temperature: Optional[Temperature] = None) -&gt; Atmo\n</code></pre> <p>Creates standard ICAO atmosphere at given altitude. If temperature not specified uses standard temperature.</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>@staticmethod\ndef icao(altitude: Union[float, Distance] = 0, temperature: Optional[Temperature] = None) -&gt; 'Atmo':\n    \"\"\"Creates standard ICAO atmosphere at given altitude.\n        If temperature not specified uses standard temperature.\n    \"\"\"\n    altitude = PreferredUnits.distance(altitude)\n    if temperature is None:\n        temperature = Atmo.standard_temperature(altitude)\n    pressure = Atmo.standard_pressure(altitude)\n\n    return Atmo(\n        altitude &gt;&gt; PreferredUnits.distance,\n        pressure &gt;&gt; PreferredUnits.pressure,\n        temperature &gt;&gt; PreferredUnits.temperature,\n        cStandardHumidity\n    )\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.machF","title":"machF  <code>staticmethod</code>","text":"<pre><code>machF(fahrenheit: float) -&gt; float\n</code></pre> <p>:return: Mach 1 in fps for Fahrenheit temperature</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>@staticmethod\ndef machF(fahrenheit: float) -&gt; float:\n    \"\"\":return: Mach 1 in fps for Fahrenheit temperature\"\"\"\n    if fahrenheit &lt; -cDegreesFtoR:\n        fahrenheit = -cDegreesFtoR\n        warnings.warn(f\"Invalid temperature: {fahrenheit}\u00b0F. Adjusted to absolute zero \"\n                      f\"It must be &gt;= {-cDegreesFtoR} to avoid a domain error.\"\n                      f\"redefine 'cDegreesFtoR' constant to increase it\", RuntimeWarning)\n    return math.sqrt(fahrenheit + cDegreesFtoR) * cSpeedOfSoundImperial\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.machC","title":"machC  <code>staticmethod</code>","text":"<pre><code>machC(celsius: float) -&gt; float\n</code></pre> <p>:return: Mach 1 in m/s for Celsius temperature</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>@staticmethod\ndef machC(celsius: float) -&gt; float:\n    \"\"\":return: Mach 1 in m/s for Celsius temperature\"\"\"\n    if celsius &lt; -cDegreesCtoK:\n        celsius = -cDegreesCtoK\n        warnings.warn(f\"Invalid temperature: {celsius}\u00b0C. Adjusted to absolute zero \"\n                      f\"It must be &gt;= {-cDegreesCtoK} to avoid a domain error.\"\n                      f\"redefine 'cDegreesCtoK' constant to increase it\", RuntimeWarning)\n    return math.sqrt(1 + celsius / cDegreesCtoK) * cSpeedOfSoundMetric\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.air_density","title":"air_density  <code>staticmethod</code>","text":"<pre><code>air_density(t: Temperature, p: Pressure, humidity: float) -&gt; float\n</code></pre> <p>Source: https://en.wikipedia.org/wiki/Density_of_air#Humid_air :return: Density in Imperial units (lb/ft^3)</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>@staticmethod\ndef air_density(t: Temperature, p: Pressure, humidity: float) -&gt; float:\n    \"\"\"Source: https://en.wikipedia.org/wiki/Density_of_air#Humid_air\n    :return: Density in Imperial units (lb/ft^3)\n    \"\"\"\n    tC = t &gt;&gt; Temperature.Celsius\n    pM = (p &gt;&gt; Pressure.hPa) * 100  # Pressure in Pascals\n    # Tetens approximation to saturation vapor pressure:\n    psat = 6.1078 * math.pow(10, 17.27 * tC / (tC + 237.3))\n    pv = humidity * psat  # Pressure of water vapor in Pascals\n    pd = pM - pv  # Partial pressure of dry air in Pascals\n    # Density in metric units kg/m^3\n    density = (pd * 0.0289652 + pv * 0.018016) / (8.31446 * (tC + cDegreesCtoK))\n    return density / cDensityImperialToMetric\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.density_metric","title":"density_metric  <code>property</code>","text":"<pre><code>density_metric: float\n</code></pre> <p>Returns density in kg/m^3</p>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.density_imperial","title":"density_imperial  <code>property</code>","text":"<pre><code>density_imperial: float\n</code></pre> <p>Returns density in lb/ft^3</p>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.temperature_at_altitude","title":"temperature_at_altitude","text":"<pre><code>temperature_at_altitude(altitude: float) -&gt; float\n</code></pre> <p>Interpolated temperature at altitude :param altitude: ASL in ft :return: temperature in \u00b0F</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>def temperature_at_altitude(self, altitude: float) -&gt; float:\n    \"\"\" Interpolated temperature at altitude\n    :param altitude: ASL in ft\n    :return: temperature in \u00b0F\n    \"\"\"\n    t = (altitude - self._a0) * cLapseRateImperial + self._t0\n    if t &lt; cLowestTempF:\n        t = cLowestTempF\n        warnings.warn(f\"Reached minimum temperature limit. Adjusted to {cLowestTempF}\u00b0F \"\n                      \"redefine 'cLowestTempF' constant to increase it \", RuntimeWarning)\n    return t\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.calculate_density","title":"calculate_density","text":"<pre><code>calculate_density(t: float, p: float) -&gt; float\n</code></pre> <p>:param t: temperature in \u00b0F :param p: pressure in inHg :return: density with specified atmosphere</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>def calculate_density(self, t: float, p: float) -&gt; float:\n    \"\"\"\n    :param t: temperature in \u00b0F\n    :param p: pressure in inHg\n    :return: density with specified atmosphere\n    \"\"\"\n    if t &gt; 0:\n        et0 = cA0 + t * (cA1 + t * (cA2 + t * (cA3 + t * cA4)))\n        et = cA5 * self.humidity * et0\n        hc = (p - 0.3783 * et) / cStandardPressure\n    else:\n        hc = 1.0\n\n    density = cStandardDensity * (\n            (cStandardTemperatureF + cDegreesFtoR) / (t + cDegreesFtoR)\n    ) * hc\n    return density\n</code></pre>"},{"location":"api/conditions/atmo/#py_ballisticcalc.conditions._conditions.Atmo.get_density_factor_and_mach_for_altitude","title":"get_density_factor_and_mach_for_altitude","text":"<pre><code>get_density_factor_and_mach_for_altitude(altitude: float) -&gt; Tuple[float, float]\n</code></pre> <p>:param altitude: ASL in units of feet :return: density ratio and Mach 1 (fps) for the specified altitude</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>def get_density_factor_and_mach_for_altitude(self, altitude: float) -&gt; Tuple[float, float]:\n    \"\"\"\n    :param altitude: ASL in units of feet\n    :return: density ratio and Mach 1 (fps) for the specified altitude\n    \"\"\"\n    # Within 30 ft of initial altitude use initial values\n    if math.fabs(self._a0 - altitude) &lt; 30:\n        density_ratio = self.density_ratio\n        mach = self._mach1\n    else:\n        # https://en.wikipedia.org/wiki/Density_of_air#Exponential_approximation\n        density_ratio = math.exp(-altitude / 34112.0)\n        t = self.temperature_at_altitude(altitude)\n        mach = Atmo.machF(t)\n    return density_ratio, mach\n</code></pre>"},{"location":"api/conditions/shot/","title":"Shot","text":"<p>Shot </p> <p>Stores shot parameters for the trajectory calculation.</p> <p>:param look_angle: Angle of sight line relative to horizontal.     If the look_angle != 0 then any target in sight crosshairs will be at a different altitude:         With target_distance = sight distance to a target (i.e., as through a rangefinder):             * Horizontal distance X to target = cos(look_angle) * target_distance             * Vertical distance Y to target = sin(look_angle) * target_distance :param relative_angle: Elevation adjustment added to weapon.zero_elevation for a particular shot. :param cant_angle: Tilt of gun from vertical, which shifts any barrel elevation     from the vertical plane into the horizontal plane by sine(cant_angle)</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>def __init__(self,\n             weapon: Weapon,\n             ammo: Ammo,\n             look_angle: Optional[Union[float, Angular]] = None,\n             relative_angle: Optional[Union[float, Angular]] = None,\n             cant_angle: Optional[Union[float, Angular]] = None,\n\n             atmo: Optional[Atmo] = None,\n             winds: Optional[List[Wind]] = None\n             ):\n    self.look_angle = PreferredUnits.angular(look_angle or 0)\n    self.relative_angle = PreferredUnits.angular(relative_angle or 0)\n    self.cant_angle = PreferredUnits.angular(cant_angle or 0)\n    self.weapon = weapon\n    self.ammo = ammo\n    self.atmo = atmo or Atmo.icao()\n    self._winds = winds or [Wind()]\n</code></pre>"},{"location":"api/conditions/shot/#py_ballisticcalc.conditions._conditions.Shot.look_angle","title":"look_angle  <code>instance-attribute</code>","text":"<pre><code>look_angle: Angular = angular(look_angle or 0)\n</code></pre>"},{"location":"api/conditions/shot/#py_ballisticcalc.conditions._conditions.Shot.relative_angle","title":"relative_angle  <code>instance-attribute</code>","text":"<pre><code>relative_angle: Angular = angular(relative_angle or 0)\n</code></pre>"},{"location":"api/conditions/shot/#py_ballisticcalc.conditions._conditions.Shot.cant_angle","title":"cant_angle  <code>instance-attribute</code>","text":"<pre><code>cant_angle: Angular = angular(cant_angle or 0)\n</code></pre>"},{"location":"api/conditions/shot/#py_ballisticcalc.conditions._conditions.Shot.weapon","title":"weapon  <code>instance-attribute</code>","text":"<pre><code>weapon: Weapon = weapon\n</code></pre>"},{"location":"api/conditions/shot/#py_ballisticcalc.conditions._conditions.Shot.ammo","title":"ammo  <code>instance-attribute</code>","text":"<pre><code>ammo: Ammo = ammo\n</code></pre>"},{"location":"api/conditions/shot/#py_ballisticcalc.conditions._conditions.Shot.atmo","title":"atmo  <code>instance-attribute</code>","text":"<pre><code>atmo: Atmo = atmo or icao()\n</code></pre>"},{"location":"api/conditions/shot/#py_ballisticcalc.conditions._conditions.Shot.winds","title":"winds  <code>property</code> <code>writable</code>","text":"<pre><code>winds: Tuple[Wind, ...]\n</code></pre> <p>Returns sorted Tuple[Wind, ...]</p>"},{"location":"api/conditions/shot/#py_ballisticcalc.conditions._conditions.Shot.barrel_elevation","title":"barrel_elevation  <code>property</code>","text":"<pre><code>barrel_elevation: Angular\n</code></pre> <p>Barrel elevation in vertical plane from horizontal</p>"},{"location":"api/conditions/shot/#py_ballisticcalc.conditions._conditions.Shot.barrel_azimuth","title":"barrel_azimuth  <code>property</code>","text":"<pre><code>barrel_azimuth: Angular\n</code></pre> <p>Horizontal angle of barrel relative to sight line</p>"},{"location":"api/conditions/wind/","title":"Wind","text":"<p>Wind </p> <p>Wind direction and velocity by down-range distance. direction_from = 0 is blowing from behind shooter.  direction_from = 90 degrees is blowing from shooter's left towards right.</p> Source code in <code>py_ballisticcalc/conditions/_conditions.py</code> <pre><code>def __init__(self,\n             velocity: Optional[Union[float, Velocity]] = None,\n             direction_from: Optional[Union[float, Angular]] = None,\n             until_distance: Optional[Union[float, Distance]] = None,\n             *,\n             max_distance_feet: Optional[float] = 1e8):\n    self.MAX_DISTANCE_FEET = float(max_distance_feet or 1e8)\n    self.velocity = PreferredUnits.velocity(velocity or 0)\n    self.direction_from = PreferredUnits.angular(direction_from or 0)\n    self.until_distance = PreferredUnits.distance(until_distance or Distance.Foot(self.MAX_DISTANCE_FEET))\n</code></pre>"},{"location":"api/conditions/wind/#py_ballisticcalc.conditions._conditions.Wind.velocity","title":"velocity  <code>instance-attribute</code>","text":"<pre><code>velocity: Velocity = velocity(velocity or 0)\n</code></pre>"},{"location":"api/conditions/wind/#py_ballisticcalc.conditions._conditions.Wind.direction_from","title":"direction_from  <code>instance-attribute</code>","text":"<pre><code>direction_from: Angular = angular(direction_from or 0)\n</code></pre>"},{"location":"api/conditions/wind/#py_ballisticcalc.conditions._conditions.Wind.until_distance","title":"until_distance  <code>instance-attribute</code>","text":"<pre><code>until_distance: Distance = distance(until_distance or Foot(MAX_DISTANCE_FEET))\n</code></pre>"},{"location":"api/conditions/wind/#py_ballisticcalc.conditions._conditions.Wind.MAX_DISTANCE_FEET","title":"MAX_DISTANCE_FEET  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MAX_DISTANCE_FEET: float = float(max_distance_feet or 100000000.0)\n</code></pre>"},{"location":"api/munition/ammo/","title":"Ammo","text":"<p>A base class for creating Weapon.</p> <p>Attributes:</p> Name Type Description <code>dm</code> <code>DragModel</code> <p>DragModel for projectile</p> <code>mv</code> <code>Velocity</code> <p>Muzzle Velocity</p> <code>powder_temp</code> <code>Temperature</code> <p>Baseline temperature that produces the given mv</p> <code>temp_modifier</code> <code>float</code> <p>Change in velocity w temperature: % per 15\u00b0C. Can be computed with .calc_powder_sens().  Only applies if:     Settings.use_powder_sensitivity = True</p> <code>use_powder_sensitivity</code> <code>bool</code> <p>Flag to allow to adjust muzzle velocity to the powder sensitivity</p> <p>Parameters:</p> Name Type Description Default <code>dm</code> <code>DragModel</code> <p>drag model</p> required <code>mv</code> <code>Union[float, Velocity]</code> <p>muzzle velocity at given powder temperature</p> required <code>powder_temp</code> <code>Optional[Union[float, Temperature]]</code> <p>powder temperature</p> <code>None</code> <code>temp_modifier</code> <code>float</code> <p>Change in velocity w temperature: % per 15\u00b0C. Can be computed with .calc_powder_sens().  Only applies if: Ammo.use_powder_sensitivity = True</p> <code>0</code> <code>use_powder_sensitivity</code> <code>bool</code> <p>should adjust muzzle velocity using powder sensitivity</p> <code>False</code> Example <p>This is how you can create a weapon</p> <pre><code>from py_ballisticcalc import Ammo, Unit, DragModel\n\nammo = Ammo(\n    dm=DragModel(\n        bc=0.381,\n        drag_table=TableG7,\n        weight=Unit.Grain(300),\n        length=Unit.Inch(1.7),\n        diameter=Unit.Inch(0.338),\n    ),\n    mv=Unit.MPS(815),\n    powder_temp=Unit.Celsius(15),\n    temp_modifier=0.123,\n    use_powder_sensitivity=True,\n)\n</code></pre> Source code in <code>py_ballisticcalc/munition/_munition.py</code> <pre><code>def __init__(self,\n             dm: DragModel,\n             mv: Union[float, Velocity],\n             powder_temp: Optional[Union[float, Temperature]] = None,\n             temp_modifier: float = 0,\n             use_powder_sensitivity: bool = False):\n    \"\"\"\n    Create a new ammo instance with given parameters\n\n    Args:\n        dm: drag model\n        mv: muzzle velocity at given powder temperature\n        powder_temp: powder temperature\n        temp_modifier: Change in velocity w temperature: % per 15\u00b0C.\n            Can be computed with .calc_powder_sens().  Only applies if:\n            Ammo.use_powder_sensitivity = True\n        use_powder_sensitivity: should adjust muzzle velocity using powder sensitivity\n\n    Example:\n        This is how you can create a weapon\n\n        ```python\n        from py_ballisticcalc import Ammo, Unit, DragModel\n\n        ammo = Ammo(\n            dm=DragModel(\n                bc=0.381,\n                drag_table=TableG7,\n                weight=Unit.Grain(300),\n                length=Unit.Inch(1.7),\n                diameter=Unit.Inch(0.338),\n            ),\n            mv=Unit.MPS(815),\n            powder_temp=Unit.Celsius(15),\n            temp_modifier=0.123,\n            use_powder_sensitivity=True,\n        )\n        ```\n    \"\"\"\n    self.dm = dm\n    self.mv = PreferredUnits.velocity(mv or 0)\n    self.powder_temp = PreferredUnits.temperature(powder_temp or Temperature.Celsius(15))\n    self.temp_modifier = temp_modifier or 0\n    self.use_powder_sensitivity = use_powder_sensitivity\n</code></pre>"},{"location":"api/munition/ammo/#py_ballisticcalc.munition.Ammo.dm","title":"dm  <code>instance-attribute</code>","text":"<pre><code>dm: DragModel = dm\n</code></pre>"},{"location":"api/munition/ammo/#py_ballisticcalc.munition.Ammo.mv","title":"mv  <code>instance-attribute</code>","text":"<pre><code>mv: Velocity = velocity(mv or 0)\n</code></pre>"},{"location":"api/munition/ammo/#py_ballisticcalc.munition.Ammo.powder_temp","title":"powder_temp  <code>instance-attribute</code>","text":"<pre><code>powder_temp: Temperature = temperature(powder_temp or Celsius(15))\n</code></pre>"},{"location":"api/munition/ammo/#py_ballisticcalc.munition.Ammo.temp_modifier","title":"temp_modifier  <code>instance-attribute</code>","text":"<pre><code>temp_modifier: float = temp_modifier or 0\n</code></pre>"},{"location":"api/munition/ammo/#py_ballisticcalc.munition.Ammo.use_powder_sensitivity","title":"use_powder_sensitivity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>use_powder_sensitivity: bool = use_powder_sensitivity\n</code></pre>"},{"location":"api/munition/ammo/#py_ballisticcalc.munition.Ammo.calc_powder_sens","title":"calc_powder_sens","text":"<pre><code>calc_powder_sens(other_velocity: Union[float, Velocity], other_temperature: Union[float, Temperature]) -&gt; float\n</code></pre> <p>Calculates velocity correction by temperature change; assigns to self.temp_modifier</p> <p>Parameters:</p> Name Type Description Default <code>other_velocity</code> <code>Union[float, Velocity]</code> <p>other velocity at other_temperature</p> required <code>other_temperature</code> <code>Union[float, Temperature]</code> <p>other temperature</p> required <p>Returns:</p> Type Description <code>float</code> <p>temperature modifier in terms %v_delta/15\u00b0C</p> Example <pre><code>powder_sensitivity = ammo.calc_powder_sens(\n    Unit.MPS(830),\n    Unit.Celsius(200)\n)\n</code></pre> Source code in <code>py_ballisticcalc/munition/_munition.py</code> <pre><code>def calc_powder_sens(self, other_velocity: Union[float, Velocity],\n                     other_temperature: Union[float, Temperature]) -&gt; float:\n    \"\"\"Calculates velocity correction by temperature change; assigns to self.temp_modifier\n\n    Args:\n        other_velocity: other velocity at other_temperature\n        other_temperature: other temperature\n\n    Returns:\n        temperature modifier in terms %v_delta/15\u00b0C\n\n    Example:\n        ```python\n        powder_sensitivity = ammo.calc_powder_sens(\n            Unit.MPS(830),\n            Unit.Celsius(200)\n        )\n        ```\n    \"\"\"\n    v0 = self.mv &gt;&gt; Velocity.MPS\n    t0 = self.powder_temp &gt;&gt; Temperature.Celsius\n    v1 = PreferredUnits.velocity(other_velocity) &gt;&gt; Velocity.MPS\n    t1 = PreferredUnits.temperature(other_temperature) &gt;&gt; Temperature.Celsius\n\n    v_delta = math.fabs(v0 - v1)\n    t_delta = math.fabs(t0 - t1)\n    v_lower = v1 if v1 &lt; v0 else v0\n\n    if v_delta == 0 or t_delta == 0:\n        raise ValueError(\n            \"Temperature modifier error, other velocity\"\n            \" and temperature can't be same as default\"\n        )\n    self.temp_modifier = v_delta / t_delta * (15 / v_lower)  # * 100\n    return self.temp_modifier\n</code></pre>"},{"location":"api/munition/ammo/#py_ballisticcalc.munition.Ammo.get_velocity_for_temp","title":"get_velocity_for_temp","text":"<pre><code>get_velocity_for_temp(current_temp: Union[float, Temperature]) -&gt; Velocity\n</code></pre> <p>Calculates muzzle velocity at temperature, based on temp_modifier.</p> <p>Parameters:</p> Name Type Description Default <code>current_temp</code> <code>Union[float, Temperature]</code> <p>Temperature of cartridge powder</p> required <p>Returns:</p> Type Description <code>Velocity</code> <p>Muzzle velocity corrected to current_temp</p> Example <pre><code>muzzle_velocity = ammo.get_velocity_for_temp(\n    Unit.Celsius(200)\n)\n</code></pre> Source code in <code>py_ballisticcalc/munition/_munition.py</code> <pre><code>def get_velocity_for_temp(self, current_temp: Union[float, Temperature]) -&gt; Velocity:\n    \"\"\"Calculates muzzle velocity at temperature, based on temp_modifier.\n\n    Args:\n        current_temp: Temperature of cartridge powder\n\n    Returns:\n        Muzzle velocity corrected to current_temp\n\n    Example:\n        ```python\n        muzzle_velocity = ammo.get_velocity_for_temp(\n            Unit.Celsius(200)\n        )\n        ```\n    \"\"\"\n    try:\n        v0 = self.mv &gt;&gt; Velocity.MPS\n        t0 = self.powder_temp &gt;&gt; Temperature.Celsius\n        t1 = PreferredUnits.temperature(current_temp) &gt;&gt; Temperature.Celsius\n        t_delta = t1 - t0\n        muzzle_velocity = self.temp_modifier / (15 / v0) * t_delta + v0\n    except ZeroDivisionError:\n        muzzle_velocity = 0\n    return Velocity.MPS(muzzle_velocity)\n</code></pre>"},{"location":"api/munition/weapon/","title":"Weapon","text":"<p>A base class for creating Weapon.</p> <p>Attributes:</p> Name Type Description <code>sight_height</code> <code>Distance</code> <p>Sight height</p> <code>twist</code> <code>Distance</code> <p>Twist</p> <code>zero_elevation</code> <code>Angular</code> <p>Zero elevation</p> <code>sight</code> <code>Optional[Sight]</code> <p>Sight properties</p> <p>Parameters:</p> Name Type Description Default <code>sight_height</code> <code>Optional[Union[float, Distance]]</code> <p>Vertical distance from center of bore line to center of sight line.</p> <code>None</code> <code>twist</code> <code>Optional[Union[float, Distance]]</code> <p>Distance for barrel rifling to complete one complete turn. Positive value =&gt; right-hand twist, negative value =&gt; left-hand twist.</p> <code>None</code> <code>zero_elevation</code> <code>Optional[Union[float, Angular]]</code> <p>Angle of barrel relative to sight line when sight is set to \"zero.\" (Typically computed by ballistic Calculator.)</p> <code>None</code> <code>sight</code> <code>Optional[Sight]</code> <p>Sight properties</p> <code>None</code> Example <p>This is how you can create a weapon</p> <pre><code>from py_ballisticcalc import Weapon, Unis, Sight\n\nweapon = Weapon(\n    sight_height=Unit.Inch(2.),\n    twist=Unit.Inch(10.),\n    zero_elevation=Unit.Mil(0),\n    sight=Sight(\n        'FFP', 2,\n        h_click_size=Unit.Mil(0.2),\n        v_click_size=Unit.Mil(0.2)\n    )\n)\n</code></pre> Source code in <code>py_ballisticcalc/munition/_munition.py</code> <pre><code>def __init__(self,\n             sight_height: Optional[Union[float, Distance]] = None,\n             twist: Optional[Union[float, Distance]] = None,\n             zero_elevation: Optional[Union[float, Angular]] = None,\n             sight: Optional[Sight] = None):\n    \"\"\"\n    Create a new weapon instance with given parameters\n\n    Args:\n        sight_height: Vertical distance from center of bore line to center of sight line.\n        twist: Distance for barrel rifling to complete one complete turn.\n            Positive value =&gt; right-hand twist, negative value =&gt; left-hand twist.\n        zero_elevation: Angle of barrel relative to sight line when sight is set to \"zero.\"\n            (Typically computed by ballistic Calculator.)\n        sight: Sight properties\n\n    Example:\n        This is how you can create a weapon\n\n        ```python\n        from py_ballisticcalc import Weapon, Unis, Sight\n\n        weapon = Weapon(\n            sight_height=Unit.Inch(2.),\n            twist=Unit.Inch(10.),\n            zero_elevation=Unit.Mil(0),\n            sight=Sight(\n                'FFP', 2,\n                h_click_size=Unit.Mil(0.2),\n                v_click_size=Unit.Mil(0.2)\n            )\n        )\n        ```\n    \"\"\"\n    self.sight_height = PreferredUnits.sight_height(sight_height or 0)\n    self.twist = PreferredUnits.twist(twist or 0)\n    self.zero_elevation = PreferredUnits.angular(zero_elevation or 0)\n    self.sight = sight\n</code></pre>"},{"location":"api/munition/weapon/#py_ballisticcalc.munition.Weapon.sight_height","title":"sight_height  <code>instance-attribute</code>","text":"<pre><code>sight_height: Distance = sight_height(sight_height or 0)\n</code></pre>"},{"location":"api/munition/weapon/#py_ballisticcalc.munition.Weapon.twist","title":"twist  <code>instance-attribute</code>","text":"<pre><code>twist: Distance = twist(twist or 0)\n</code></pre>"},{"location":"api/munition/weapon/#py_ballisticcalc.munition.Weapon.zero_elevation","title":"zero_elevation  <code>instance-attribute</code>","text":"<pre><code>zero_elevation: Angular = angular(zero_elevation or 0)\n</code></pre>"},{"location":"api/munition/weapon/#py_ballisticcalc.munition.Weapon.sight","title":"sight  <code>instance-attribute</code>","text":"<pre><code>sight: Optional[Sight] = sight\n</code></pre>"},{"location":"concepts/unit/","title":"\ud83d\udccf Unit","text":"API Documentation <p><code>py_ballisticcalc.conditions.unit</code></p>"},{"location":"concepts/conditions/atmo/","title":"\ud83c\udf21\ufe0f Atmo","text":"API Documentation <p><code>py_ballisticcalc.conditions.Atmo</code></p>"},{"location":"concepts/conditions/shot/","title":"\ud83c\udfaf Shot","text":"API Documentation <p><code>py_ballisticcalc.conditions.Shot</code></p>"},{"location":"concepts/conditions/wind/","title":"\ud83d\udca8 Wind","text":"API Documentation <p><code>py_ballisticcalc.conditions.Wind</code></p>"},{"location":"concepts/munition/ammo/","title":"\ud83d\udca3 Ammo","text":"API Documentation <p><code>py_ballisticcalc.munition.Ammo</code></p> <p>The way to define <code>projectile</code> properties in py-ballisticcalc is via Ammo dataclass. Ammo instances are simply and reusable.</p>"},{"location":"concepts/munition/ammo/#ammo-initialization","title":"Ammo initialization","text":"<p>Import the necessary types to create a Weapon instance <pre><code>from py_ballisticcalc import Ammo, Unit, DragModel\n</code></pre></p> <p>Then create a weapon <pre><code>ammo = Ammo(\n    dm=DragModel(\n        bc=0.381,\n        drag_table=TableG7,\n        weight=Unit.Grain(300),\n        length=Unit.Inch(1.7),\n        diameter=Unit.Inch(0.338),\n    ),\n    mv=Unit.MPS(815),\n    powder_temp=Unit.Celsius(15),\n    temp_modifier=0.123,\n    use_powder_sensitivity=True,\n)\n</code></pre> In this example, we use calls to <code>Unit</code> to initialize <code>Ammo</code> fields with specific unit types. We also can do it using <code>float</code>'s then fields will be initialized with unit types defined in <code>PreferredUnit</code> class, or we can directly specify the dimension with referencing to dimension type class</p> <p>Fields of a <code>Ammo</code> can be accessed as normal attributes of <code>ammo</code> instance</p> <p>Ammo instance is mutable object and field values can be changed through attribute assignment</p> <p>Warning</p> <p>Direct values assignment to attributes of <code>ammo</code> is restricted and not recommended, it can be not reinitialized properly after that</p> <p>Weapon possess the following methods and attributes:</p> <ul> <li><code>dm</code>: DragModel for projectile</li> <li><code>mv</code>: Muzzle Velocity</li> <li><code>powder_temp</code>: Baseline temperature that produces the given mv</li> <li><code>temp_modifier</code>: Change in velocity w temperature: % per 15\u00b0C.</li> <li><code>use_powder_sensitivity</code>: Flag to enable adjusting muzzle velocity to powder temperature</li> <li><code>calc_powder_sens</code>: Method to calculate powder temperature sensitivity coefficient</li> <li><code>get_velocity_for_temp</code>: Method to get adjusted muzzle velocity to powder sensitivity</li> </ul> <p>Note</p> <p>See the API documentation of <code>Ammo</code> for the class definition including a full list of methods and attributes.</p>"},{"location":"concepts/munition/weapon/","title":"\ud83d\udd2b Weapon","text":"API Documentation <p><code>py_ballisticcalc.munition.Weapon</code></p> <p>The way to define <code>weapon</code> properties in py-ballisticcalc is via Weapon dataclass. Weapon instances are simply and reusable.</p>"},{"location":"concepts/munition/weapon/#weapon-initialization","title":"Weapon initialization","text":"<p>Import the necessary types to create a Weapon instance <pre><code>from py_ballisticcalc import Weapon, Unit, Sight\n</code></pre></p> <p>Then create a weapon <pre><code>weapon = Weapon(\n    sight_height=Unit.Inch(2.),\n    twist=Unit.Inch(10.),\n    zero_elevation=Unit.Mil(0),\n    sight=Sight(\n        'FFP', 2,\n        h_click_size=Unit.Mil(0.2),\n        v_click_size=Unit.Mil(0.2)\n    )\n)\n</code></pre> In this example, we use calls to <code>Unit</code> to initialize <code>Weapon</code> fields with specific unit types. We also can do it using <code>float</code>'s then fields will be initialized with unit types defined in <code>PreferredUnit</code> class, or we can directly specify the dimension with referencing to dimension type class</p> <p>Fields of a <code>Weapon</code> can be accessed as normal attributes of <code>weapon</code> instance</p> <p>Weapon instance is mutable object and field values can be changed through attribute assignment</p>"},{"location":"concepts/munition/weapon/#weapon-methods-and-properties","title":"Weapon methods and properties","text":"<p>Weapon possess the following methods and attributes:</p> <ul> <li><code>sight_height</code>: Sight height, given distance from barrel axis and sight lense axis </li> <li><code>twist</code>: Given barrel twist, accepted as ratio 1 / given value </li> <li><code>zero_elevation</code>: Barrel elevation - the angle that displays how barrel should be elevated to hit target on zeroing distance </li> <li><code>sight</code>: Sight type and properties</li> </ul> <p>Note</p> <p>See the API documentation of <code>Weapon</code> for the class definition including a full list of methods and attributes.</p>"}]}