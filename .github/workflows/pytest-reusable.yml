# .github/workflows/reusable-test.yml
name: Reusable Test Workflow

# This 'on' section specifies that this workflow can only be called by other workflows.
# It defines the 'inputs' (parameters) that a calling workflow must provide.
on:
  workflow_call:
    inputs:
      os: # Input for the operating system (e.g., ubuntu-latest)
        required: true # This input is mandatory
        type: string
      python_version: # Input for the Python version (e.g., "3.9")
        required: true # This input is mandatory
        type: string
      engine_name: # Input for the engine type to test with (e.g., "euler_engine")
        required: true # This input is mandatory
        type: string

jobs:
  run_single_test_combination: # This is the job that will execute for each specific test combination
    # This 'name' will appear clearly in the GitHub Actions UI for each individual test run.
    # For example: "Python 3.10 on macos-13 with rk4_engine"
    name: Python ${{ inputs.python_version }} on ${{ inputs.os }} with ${{ inputs.engine_name }}
    runs-on: ${{ inputs.os }} # The runner's OS is provided by the 'os' input

    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository Code # A clear name for this foundational step

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ inputs.python_version }} # Use the Python version passed via inputs

      - name: Validate extensions version matching
        # Install tomli (if not already present) to parse pyproject.toml
        # Then run your custom version check hook
        run: |
          uv pip install tomli
          python hooks/version_check.py

      - name: Install the project in editable mode
        # Install your project and its development dependencies
        run: |
          uv pip install -e .[dev]

      - name: Build Cython extensions (if applicable)
        # This step runs ONLY if the engine_name starts with 'cythonized_'.
        # Replace 'python setup.py build_ext --inplace' with your actual build command
        # for Cythonized modules if it's different.
        if: startsWith(inputs.engine_name, 'cythonized_')
        run: |
          echo "Detected Cythonized engine. Building extensions..."
          uv pip install -e ./py_ballisticcalc.exts
        shell: bash # Ensure this command runs in a bash shell environment

      - name: Run tests with ${{ inputs.engine_name }}
        # Execute pytest using the engine name provided as an input.
        # --no-header for cleaner output, -v for verbose output, -n auto for parallel execution if applicable.
        run: |
          pytest tests --no-header -v -n auto --engine=${{ inputs.engine_name }}
          # Check the exit code of pytest. If it's not 0 (failure), run again without capture for full logs.
          if [ $? -ne 0 ]; then
            echo "Pytest failed on the first attempt. Running again without capture for detailed output."
            pytest tests -v --engine=${{ inputs.engine_name }}
          else
            echo "Pytest succeeded on the first attempt."
          fi
        shell: bash # Ensure this command runs in a bash shell environment
