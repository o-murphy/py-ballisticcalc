# .github/workflows/reusable-test.yml
name: Reusable Test Workflow

# This 'on' section specifies that this workflow can only be called by other workflows.
# It defines the 'inputs' (parameters) that a calling workflow must provide.
on:
  workflow_call:
    inputs:
      os: # Input for the operating system (e.g., ubuntu-latest)
        required: true # This input is mandatory
        type: string
      python_version: # Input for the Python version (e.g., "3.10")
        required: true # This input is mandatory
        type: string
      engine_name: # Input for the engine type to test with (e.g., "euler_engine")
        required: true # This input is mandatory
        type: string
      stress_test: # Input to manually enable stress tests
        required: false # Stress tests are optional
        type: boolean
        default: false # Disabled by default

jobs:
  run_single_test_combination: # This is the job that will execute for each specific test combination
    # This 'name' will appear clearly in the GitHub Actions UI for each individual test run.
    # For example: "Python 3.10 on macos-14 with rk4_engine"
    name: Python ${{ inputs.python_version }} on ${{ inputs.os }} with ${{ inputs.engine_name }}
    runs-on: ${{ inputs.os }} # The runner's OS is provided by the 'os' input

    steps:
      - uses: actions/checkout@v5
        name: Checkout Repository Code # A clear name for this foundational step

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v7
        with:
          python-version: ${{ inputs.python_version }} # Use the Python version passed via inputs
          activate-environment: "true"
      
      - name: Validate extensions version matching
        # Install tomli (if not already present) to parse pyproject.toml
        # Then run your custom version check hook
        run: uv run hooks/version_check.py
        shell: bash

      - name: Install dependencies for python 3.13.x 3.14.x (Linux)
        # Install deps to build matplotlib, numpy, pandas, scipy, jupyter
        if: ${{ (startsWith(inputs.python_version, '3.13') || startsWith(inputs.python_version, '3.14')) && runner.os == 'Linux' }}
        run: |
          sudo apt update 
          echo "Installing build-essential for C extensions (like cffi)..."
          sudo apt install build-essential
          echo "Installing libffi-dev for jupyter..."
          sudo apt install libffi-dev
          echo "Installing libjpeg-dev zlib1g-dev for matplotlib(pillow)..."
          sudo apt install libjpeg-dev zlib1g-dev
          echo "Installing gfortran libopenblas-dev for scipy..."
          sudo apt install gfortran libopenblas-dev
        shell: bash

      - name: Install dependencies for python 3.14.x (macOS)
        # Install deps to build scipy (gfortran, openblas)
        if: ${{ startsWith(inputs.python_version, '3.14') && runner.os == 'macOS' }}
        run: |
          # Homebrew is already installed on GitHub Actions macOS runners
          echo "Installing dependencies via Homebrew for macOS..."
          # brew install gcc  # Provides gfortran # Already installed in gh CI
          brew install openblas
        shell: bash

      - name: System dependencies on Windows (Python 3.14)
        # Compilation of packages like scipy on Windows for new Python versions (like 3.14)
        # usually fails in CI because it requires complex MSVC configuration.
        # This step performs no action, as the setup is too complex for a simple 'run:' block.
        if: ${{ startsWith(inputs.python_version, '3.14') && runner.os == 'Windows' }}
        run: |
          echo "Warning: No system dependency setup for Windows Python 3.14."
          echo "If no wheels are available, the build is expected to fail (due to missing MSVC/Fortran compiler)."
        shell: bash

      - name: Install the project in editable mode
        # Install your project and its development dependencies
        run: uv sync -p ${{ inputs.python_version }} --dev
        shell: bash

      - name: Build Cython extensions (if applicable)
        # This step runs ONLY if the engine_name starts with 'cythonized_'.
        # Replace 'python setup.py build_ext --inplace' with your actual build command
        # for Cythonized modules if it's different.
        if: startsWith(inputs.engine_name, 'cythonized_')
        run: |
          echo "Detected Cythonized engine. Building extensions..."
          uv sync -p ${{ inputs.python_version }} --dev --extra exts
        shell: bash # Ensure this command runs in a bash shell environment

      - name: Run tests with ${{ inputs.engine_name }}
        # Execute pytest using the engine name provided as an input.
        # --no-header for cleaner output, -v for verbose output, -n auto for parallel execution if applicable.
        run: |
          # 1. Run tests and save the exit code, suppressing the default failure behavior
          pytest tests --no-header -v -n auto --engine=${{ inputs.engine_name }} || EXIT_CODE=$?
          
          # 2. Check the saved exit code. 
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Pytest failed on the first attempt (Code: $EXIT_CODE). Running again without parallel execution for detailed output."
            # Run again without parallelization (-n auto)
            pytest tests -v --engine=${{ inputs.engine_name }}
            # If the second attempt also fails, the script will exit with the non-zero code of this last command.
          else
            echo "Pytest succeeded on the first attempt."
          fi
        shell: bash # Ensure this command runs in a bash shell environment

      - name: Test Cythonized code (if applicable)
        if: startsWith(inputs.engine_name, 'cythonized_')
        run: |
          echo "Detected Cythonized engine. Testing extensions..."
          # 1. Run tests and save the exit code, suppressing the default failure behavior
          pytest ./py_ballisticcalc.exts/tests --no-header -v -n auto --engine=${{ inputs.engine_name }} || EXIT_CODE=$?
                    
          # 2. Check the saved exit code.
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Pytest failed on the first attempt (Code: $EXIT_CODE). Running again without parallel execution for detailed output."
            # Run again without parallelization (-n auto)
            pytest ./py_ballisticcalc.exts/tests -v --engine=${{ inputs.engine_name }}
            # If the second attempt also fails, the script will exit with the non-zero code of this last command.
          else
            echo "Pytest succeeded on the first attempt."
          fi
        shell: bash # Ensure this command runs in a bash shell environment

      - name: Run stress tests (Normal)
        id: stress_test_normal
        if: ${{ inputs.stress_test == true && startsWith(inputs.engine_name, 'cythonized_') }}
        run: |
          echo "Running stress tests normally..."
          pytest ./py_ballisticcalc.exts/tests -m stress
        shell: bash
        continue-on-error: true

      - name: Run stress tests (Valgrind) and save log ðŸ’¾
        id: valgrind_run
        if: ${{ inputs.stress_test == true && startsWith(inputs.engine_name, 'cythonized_') && failure() }}
        
        run: |
          LOG_FILE="valgrind.log"
          echo "Normal stress test FAILED. Installing Valgrind and rerunning with memory check. Log will be visible in the console AND saved to ${LOG_FILE}"
          
          sudo apt-get update
          sudo apt-get install -y valgrind
          
          valgrind \
            --tool=memcheck \
            --leak-check=full \
            --show-leak-kinds=all \
            --track-origins=yes \
            -- \
            pytest ./py_ballisticcalc.exts/tests -m stress \
            2>&1 | tee ${LOG_FILE}
        shell: bash

      - name: Upload Valgrind log artifact ðŸ“¤
        uses: actions/upload-artifact@v4
        if: ${{ always() && inputs.stress_test == true && startsWith(inputs.engine_name, 'cythonized_') && steps.valgrind_run.outcome != 'skipped' }}
        with:
          name: valgrind-stress-test-log
          path: valgrind.log
          retention-days: 14
