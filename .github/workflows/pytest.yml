name: Pytest

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  # Job for full matrix, runs ONLY on pull_request events
  test_full_matrix:
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-13, macos-14 ]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
    - uses: actions/checkout@v4

    - name: Install uv and set the python version
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Validate exts version matching
      run: |
        uv pip install tomli
        python hooks/version_check.py

    - name: Install the project
      run: |
        uv pip install -e .[dev]

    - name: Run tests in pure python mode
      run: |
        pytest tests --no-header -v -n auto --engine=py_ballisticcalc
        if [ $? -ne 0 ]; then
          echo "Pytest failed, running without capture"
          pytest tests -v --engine=py_ballisticcalc
        else
          echo Pytest succeeded.
        fi
      shell: bash
      if: runner.os != 'Windows'

    - name: Run tests in pure python mode on Windows
      run: |
        pytest tests --no-header -v -n auto --engine=py_ballisticcalc
        if %ERRORLEVEL% neq 0 (
          echo Pytest failed, running without capture
          pytest tests -v --engine=py_ballisticcalc
        ) else (
          echo Pytest succeeded.
        )
      shell: cmd
      if: runner.os == 'Windows'

  # Job for minimal matrix, runs ONLY on push events
  test_minimal_matrix:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest # Fixed OS
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"] # Fixed Python version
    steps:
    - uses: actions/checkout@v4

    - name: Install uv and set the python version
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Validate exts version matching
      run: |
        uv pip install tomli
        python hooks/version_check.py

    - name: Install the project
      run: |
        uv pip install -e .[dev]

    - name: Run tests in pure python mode
      run: |
        pytest tests --no-header -v -n auto --engine=py_ballisticcalc
        if [ $? -ne 0 ]; then
          echo "Pytest failed, running without capture"
          pytest tests -v --engine=py_ballisticcalc
        else
          echo Pytest succeeded.
        fi
      shell: bash
